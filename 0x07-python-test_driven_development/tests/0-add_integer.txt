==================================
| TEST CASES FOR THE ADD FUNCTION |
==================================

It is supposed for the function to return an integer, resulting
from the add of a and b

Numbers
=======
	
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5
	>>> add_integer(5, 4.0)
	9
	>>> add_integer(2.4, 2.6)
	4

Trying out some Negative numbers

	>>> add_integer(-1, 0)
	-1
	>>> add_integer(-2, 5)
	3
	>>> add_integer(-1, 1)
	0

Trying Strings and non_numbers

	>>> add_integer('number', 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(3, 'string')
	Traceback (most recent call last):
	TypeError: b must be an integer

if both are non_numbers, raise a error for the first one

	>>> add_integer(None, 'anything')
	Traceback (most recent call last):
	TypeError: a must be an integer

as the function assumes b = 98 if not passed, ignoring the second parameter

	>>> add_integer(2)
	100

The function will fail if infinity is provided.

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
